#!/bin/bash

cd ~/fractal-projs/APPS-FROM-SCRIPTS

echo "This script only supports Vite apps."

read -p "Give the new app a (kebab-case) name: " APP_NAME

if [ -z "$APP_NAME" ]; then
    echo "App name cannot be empty."
    exit 1
fi

# Function to check if response is affirmative or empty
# (this means all responses are Yes by default)
is_affirmative() {
    [[ "$1" =~ ^[Yy]$ ]] || [[ -z "$1" ]]
}

# Get user responses
read -p "Do you want to add an Express server? (Y/n): " ADD_EXPRESS_RESPONSE
read -p "Do you need a PostgreSQL database? (Y/n): " ADD_POSTGRES_RESPONSE
read -p "Do you to add Vitest for test coverage? (Y/n): " ADD_VITEST_RESPONSE

# Set boolean variables based on responses 
ADD_EXPRESS=$(is_affirmative "$ADD_EXPRESS_RESPONSE" && echo true || echo false)
ADD_POSTGRES=$(is_affirmative "$ADD_POSTGRES_RESPONSE" && echo true || echo false)
ADD_VITEST=$(is_affirmative "$ADD_VITEST_RESPONSE" && echo true || echo false)

# Create the frontend project

npm create vite@latest $APP_NAME -- --template react-swc-ts

cd $APP_NAME

npm install
npm init -y

# Clear away any pm2 processes that are already in place and might compete for a PORT slot
pm2 delete all



# Add an express server if requested
if $ADD_EXPRESS; then
  mkdir server
  cd server
  npm init -y
  npm install express
  npm i --save-dev @types/express
  npm install cors
  npm i --save-dev @types/cors
  echo "Express server setup completed in the 'server' directory."
  cp ~/bin/boilerplate.server.ts ./server.ts
  echo "Boilerplate server file copied to '$APP_NAME/server/server.ts'."
  pm2 start 'bun --watch server.ts' --name devserver
  cd ..
  cp ~/bin/boilerplate.App.tsx ./src/App.tsx
  echo "Boilerplate client file updated with server routes in 'app-name/src/App.tsx'."
else
  echo "Express server setup skipped."
fi




# Add a database if requested
if $ADD_POSTGRES; then
  docker compose down
  npm install prisma --save-dev
  npx prisma
  npx prisma init
  cp ~/bin/boilerplate.docker-compose.yml ./docker-compose.yml
  echo "Boilerplate Docker yml files added."
  cp ~/bin/boilerplate.dotenv ./.env
  cp ~/bin/boilerplate.dotenv.test ./.env.test
  cp ~/bin/boilerplate.schema.prisma ./prisma/schema.prisma
  npx prisma migrate dev --name initial-setup --force
  docker compose up
  pm2 start 'npx prisma studio' --name prismastudio

else
  echo "Postgres setup skipped."
fi




# Add a test suite if requested
if $ADD_VITEST; then
  npm install -D vitest

  if $ADD_POSTGRES; then
  npm install dotenv
  cp ~/bin/boilerplate.docker-compose.test.yml ./docker-compose.test.yml
  cp ~/bin/boilerplate.dotenv.test ./.env.test
  npm pkg set scripts.test:env="npx dotenv -e .env.test vitest"
  npm pkg set scripts.test:server:up="pm2 start 'bun server/server.ts' --name testserver"
  npm pkg set scripts.test:server:down="pm2 delete testserver"
  npm pkg set scripts.test:prisma:migrate="npx prisma migrate dev --name initial-setup --force"
  npm pkg set scripts.test:docker:up="docker compose -f docker-compose.test.yml up -d"
  npm pkg set scripts.test:docker:down="docker compose -f docker-compose.test.yml down"
  npm pkg set scripts.test:run="vitest run"
  npm pkg set scripts.test-all="npm run test:docker:up && npx dotenv-cli -e .env.test -- npm run test:prisma:migrate && npx dotenv-cli -e .env.test -- npm run test:server:up && npx dotenv-cli -e .env.test -- npm run test:run; npm run test:server:down && npm run test:docker:down"

  fi

else
  echo "Vitest setup skipped."
fi


# Open the project in VSCode
code .

# Run the frontend code in PM2
pm2 start 'npm run dev' --name devclient

# Wait half a second and then fire up the browser
sleep .5
open http://localhost:5173/


# Fire up PM2 logs if we have a server running there
# This will give us the server console messages.
if $ADD_EXPRESS; then
pm2 logs
fi